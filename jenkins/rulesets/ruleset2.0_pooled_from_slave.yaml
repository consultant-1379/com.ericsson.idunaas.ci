modelVersion: 2.0

description: "DETES: CI Pipeline"

docker-images:
  - ci-utils:                   armdocker.rnd.ericsson.se/proj-idun-aas/ci-utils:latest
  - ci-utils-pool:              armdocker.rnd.ericsson.se/proj-idun-aas/ci-utils:13.0.0-1
  - minio-client:               armdocker.rnd.ericsson.se/dockerhub-ericsson-remote/minio/mc:latest
  - deployment-manager:         ${env.DEPLOYMENT_MANAGER_DOCKER_IMAGE}
  - eric-oss-ci-scripts:        ${env.CI_DOCKER_IMAGE}

properties:
  - kube-config-path:             ./admin.conf
  - docker-config-path:           ./dockerconfig.json
  - eric-oss-ci-scripts-flags:    "--user $(id -u):$(id -g)
                                   --volume ${env.PWD}:/ci-scripts/output-files
                                   --volume ${env.PWD}:${env.PWD}
                                   --workdir ${env.PWD}
                                   --group-add 0
                                   --network host
                                   --env DOCKER_HOST"
  - csar-builder-image-repo-path: proj-am/releases
  - csar-builder-image-name:      eric-am-package-manager
  - csar-builder-image-tag:       2.110.0-5
  - csar-sol-version:             "3.3.1"
  - image-registry:               armdocker.rnd.ericsson.se
  - csar-builder-image-full-name: ${image-registry}/${csar-builder-image-repo-path}/${csar-builder-image-name}:${csar-builder-image-tag}
  - helm-cache-tags: "--env HELM_VERSION=3.6.2
                      --env XDG_DATA_HOME=/helm_data/
                      --env HELM_CACHE_HOME=${env.PWD}
                      --env HELM_CONFIG_HOME=${env.PWD}
                      --volume ${env.DEPENDENCY_CACHE_DIRECTORY}:${env.DEPENDENCY_CACHE_DIRECTORY}
                      --volume ${env.PWD}/testsuite/helm-chart-validator/helm_file_plugin/file/:/helm_data/helm/plugins/file/"

env:
  - VERBOSITY (default=3)
  - HELM_TIMEOUT (default=1800)
  - DOCKER_TIMEOUT (default=60)
  - LA_HOSTNAME (default=default)
  - KAFKA_BOOTSTRAP_HOSTNAME (default=default)
  - PF_HOSTNAME
  - UDS_HOSTNAME
  - SO_HOSTNAME
  - GAS_HOSTNAME
  - VNFM_HOSTNAME
  - VNFM_REGISTRY_HOSTNAME
  - VNFLCM_SERVICE_DEPLOY (default=false)
  - HELM_REGISTRY_DEPLOY (default=false)
  - HELM_REGISTRY_HOSTNAME
  - IAM_HOSTNAME
  - ADC_HOSTNAME
  - APPMGR_HOSTNAME (default=default)
  - OS_HOSTNAME (default=default)
  - GR_HOSTNAME
  - ML_HOSTNAME (default=default)
  - AVIZ_HOSTNAME (default=default)
  - TA_HOSTNAME (default=default)
  - EAS_HOSTNAME (default=default)
  - CH_HOSTNAME (default=default)
  - TH_HOSTNAME (default=default)
  - BDR_HOSTNAME (default=default)
  - IPV6_ENABLE (default=false)
  - INGRESS_IP
  - INGRESS_CLASS (default=default)
  - VNFLCM_SERVICE_IP
  - FH_SNMP_ALARM_IP (default=default)
  - EO_CM_HOSTNAME
  - EO_CM_IP
  - EO_CM_ESA_IP
  - GET_ALL_IMAGES(default=false)
  - INCLUDE_CHART_IMAGES (default='false')
  - FETCH_CHARTS (default='false')
  - USE_SKIP_IMAGE_PUSH (default="false")
  - USE_SKIP_UPGRADE_FOR_UNCHANGED_RELEASES (default="false")
  - DDP_AUTO_UPLOAD (default=false)
  - DOCKER_REGISTRY
  - FULL_PATH_TO_SITE_VALUES_FILE
  - PROPERTIES_FILE (default=properties.txt)
  - HELMFILE_CHART_NAME
  - HELMFILE_CHART_VERSION
  - HELMFILE_CHART_REPO
  - CI_DOCKER_IMAGE
  - APP_SET(default="eric-eiap")
  - PWD
  - ENV_NAME
  - NAMESPACE
  - SUB_MODULE_PATH(default="")
  - DEPLOYMENT_MANAGER_DOCKER_IMAGE (default=armdocker.rnd.ericsson.se/proj-eric-oss-drop/eric-oss-deployment-manager:latest)
  - DOCKER_FLAGS_NO_DOCKER_CONF
  - DOCKER_FLAGS
  - DOCKER_FLAGS_DEPLOYMENT_MANAGER
  - MINIO_FLAGS_NO_DOCKER_CONF
  - CRD_NAMESPACE
  - CHART_NAME
  - CHART_REPO
  - INT_CHART_REPO
  - INT_CHART_NAME
  - PATH_TO_HELMFILE
  - INT_CHART_VERSION
  - DEPLOYMENT_TYPE
  - DEPLOYMENT_NAME
  - PATH_TO_CERTIFICATES_FILES
  - PATH_TO_SITE_VALUES_FILE
  - PATH_TO_WORKDIR
  - PATH_TO_KUBECONFIG_FILE
  - FUNCTIONAL_USER_USERNAME
  - FUNCTIONAL_USER_PASSWORD
  - STATE_VALUES_FILE
  - IDUN_USER_USERNAME
  - IDUN_USER_PASSWORD
  - PATH_TO_VALUES_FILE
  - ACTION
  - DEPLOYMENT_NAME
  - URL_VALUE
  - DEPLOYMENT
  - EKS_VERSION
  - INSTANCE_SIZE
  - MINIO_CREDS
  - DOMAIN
  - DOCKERCONFIG
  - SELECTED_CLUSTER_ID
  - USERS
  - TEAM_USERS
  - START_DATE
  - END_DATE
  - JENKINS_JOB_BUILD_NUMBER
  - SPINNAKER_PIPELINE_EXECUTION
  - EIC_VERSION
  - TAGS
  - TEAM_NAME
  - JIRA_ID
  - COMMENT
  - WATCHERS
  - TRANSITION_TO
  - ARTIFACT_NAME
  - REMOTE_LINK
  - MINIO_ACCESS_KEY
  - MINIO_SECRET_KEY
  - BOOKING_END_DATE
  - EXCLUSIVE_II
  - ADP_DDC_USER_USERNAME
  - ADP_DDC_USER_PASSWORD
  - USE_CERTM (default="false")
  - CPU_LIMITS
  - MEMORY_LIMITS
  - DEDICATED_NAMESPACE
  - DEPENDENCY_CACHE_DIRECTORY (default=${env.PWD}/cachedir/)

var:
  - selected-cluster-id
  - network-policies
  - skip-image-check-push-parameter
  - skip-upgrade-for-unchanged-releases-parameter
  - use-certm-parameter

rules:
  pooled-deployment:
    - task: validate-jira-team-user-ids
      docker-image: ci-utils-pool
      docker-flags:
        - ${env.DOCKER_FLAGS_NO_DOCKER_CONF}
        - " -e LANG=en_US.utf8 -e LANGUAGE=en_US.utf8 -e LC_ALL=en_US.utf8"
      cmd: /bin/bash -c "export PYTHONPATH=$PYTHONPATH:/workdir/jenkins/scripts/pooled_eic; python3 -m pooled_deployment_setup validate-jira-team-user-ids --team-users ${env.TEAM_USERS}"

    - task: add-jira-comment
      docker-image: ci-utils-pool
      docker-flags:
        - ${env.DOCKER_FLAGS_NO_DOCKER_CONF}
        - " -e LANG=en_US.utf8 -e LANGUAGE=en_US.utf8 -e LC_ALL=en_US.utf8"
      cmd: /bin/bash -c "export PYTHONPATH=$PYTHONPATH:/workdir/jenkins/scripts/pooled_eic; python3 -m pooled_deployment_setup add-jira-comment --jira-id ${env.JIRA_ID} --comment \"${env.COMMENT}\""

    - task: add-jira-pipeline-details
      docker-image: ci-utils-pool
      docker-flags:
        - ${env.DOCKER_FLAGS_NO_DOCKER_CONF}
        - " -e LANG=en_US.utf8 -e LANGUAGE=en_US.utf8 -e LC_ALL=en_US.utf8"
      cmd: /bin/bash -c "export PYTHONPATH=$PYTHONPATH:/workdir/jenkins/scripts/pooled_eic; python3 -m pooled_deployment_setup add-jira-pipeline-details --jira-id ${env.JIRA_ID} --helmfile-version ${env.EIC_VERSION} --spinnaker-pipeline-execution ${env.SPINNAKER_PIPELINE_EXECUTION} --jenkins-job-build-number ${env.JENKINS_JOB_BUILD_NUMBER}"

    - task: add-jira-installation-details
      docker-image: ci-utils-pool
      docker-flags:
        - ${env.DOCKER_FLAGS_NO_DOCKER_CONF}
        - " -e LANG=en_US.utf8 -e LANGUAGE=en_US.utf8 -e LC_ALL=en_US.utf8"
      cmd: /bin/bash -c "export PYTHONPATH=$PYTHONPATH:/workdir/jenkins/scripts/pooled_eic; python3 -m pooled_deployment_setup add-jira-installation-details --jira-id ${env.JIRA_ID} --jira-file ./jira.json"

    - task: add-jira-team-users-details
      docker-image: ci-utils-pool
      docker-flags:
        - ${env.DOCKER_FLAGS_NO_DOCKER_CONF}
        - " -e LANG=en_US.utf8 -e LANGUAGE=en_US.utf8 -e LC_ALL=en_US.utf8"
      cmd: /bin/bash -c "export PYTHONPATH=$PYTHONPATH:/workdir/jenkins/scripts/pooled_eic; python3 -m pooled_deployment_setup add-jira-team-users-details --jira-id ${env.JIRA_ID} --team-users ${env.TEAM_USERS} --start-date ${env.START_DATE} --end-date ${env.END_DATE}"

    - task: add-jira-how-to-guide-details
      docker-image: ci-utils-pool
      docker-flags:
        - ${env.DOCKER_FLAGS_NO_DOCKER_CONF}
        - " -e LANG=en_US.utf8 -e LANGUAGE=en_US.utf8 -e LC_ALL=en_US.utf8"
      cmd: /bin/bash -c "export PYTHONPATH=$PYTHONPATH:/workdir/jenkins/scripts/pooled_eic; python3 -m pooled_deployment_setup add-jira-how-to-guide-details --jira-id ${env.JIRA_ID} --namespace ${env.NAMESPACE}"

    - task: add-jira-attachment
      docker-image: ci-utils-pool
      docker-flags:
        - ${env.DOCKER_FLAGS_NO_DOCKER_CONF}
        - " -e LANG=en_US.utf8 -e LANGUAGE=en_US.utf8 -e LC_ALL=en_US.utf8"
      cmd: /bin/bash -c "export PYTHONPATH=$PYTHONPATH:/workdir/jenkins/scripts/pooled_eic; python3 -m pooled_deployment_setup add-jira-attachment --jira-id ${env.JIRA_ID} --path-to-attachment ${env.ARTIFACT_NAME}"

    - task: transition-jira
      docker-image: ci-utils-pool
      docker-flags:
        - ${env.DOCKER_FLAGS_NO_DOCKER_CONF}
        - " -e LANG=en_US.utf8 -e LANGUAGE=en_US.utf8 -e LC_ALL=en_US.utf8"
      cmd: /bin/bash -c "export PYTHONPATH=$PYTHONPATH:/workdir/jenkins/scripts/pooled_eic; python3 -m pooled_deployment_setup transition-jira-to --jira-id ${env.JIRA_ID} --transition-to \"${env.TRANSITION_TO}\""

    - task: install-kubeconfig-admin-location
      cmd: /bin/bash -c "install -m 600 ${var.selected-cluster-id}_kubeconfig ./admin.conf"

    - task: install-kubeconfig-default-location
      cmd: /bin/bash -c "install -m 600 -D ${var.selected-cluster-id}_kubeconfig kube_config/config"

    - task: install-docker-config-to-root-location
      cmd: /bin/bash -c "install -m 600 -D ${env.DOCKERCONFIG} /root/.docker/config.json"

    - task: install-docker-config-to-local-location
      cmd: /bin/bash -c "install -m 600 ${env.DOCKERCONFIG} ${docker-config-path}"

    - task: set-selected-cluster-id
      cmd: echo "${env.SELECTED_CLUSTER_ID}" > .bob/var.selected-cluster-id

    - task: create-registry-secret
      docker-image: ci-utils-pool
      docker-flags:
        - ${env.DOCKER_FLAGS_NO_DOCKER_CONF}
        - " -e LANG=en_US.utf8 -e LANGUAGE=en_US.utf8 -e LC_ALL=en_US.utf8"
      cmd: /bin/bash -c "/workdir/jenkins/scripts/pooled_eic/create_k8s_registry_secret.sh
                           --namespace ${env.NAMESPACE}
                           --kubeconfig ${kube-config-path}
                           --dockerconfig ${docker-config-path}"

    - task: get-cluster
      docker-image: ci-utils-pool
      docker-flags:
        - ${env.DOCKER_FLAGS_NO_DOCKER_CONF}
        - " -e LANG=en_US.utf8 -e LANGUAGE=en_US.utf8 -e LC_ALL=en_US.utf8"
      cmd: /bin/bash -c "export PYTHONPATH=$PYTHONPATH:/workdir/jenkins/scripts/pooled_eic; python3 -m pooled_deployment_setup get-cluster --app-set ${env.APP_SET} --helmfile-version ${env.INT_CHART_VERSION} --kubeconfig_dir kubeconfigs --exclusive ${env.EXCLUSIVE_II} --dedicated_namespace ${env.DEDICATED_NAMESPACE}"

    - task: set-resource-quotas
      docker-image: ci-utils
      docker-flags:
        - ${env.DOCKER_FLAGS_NO_DOCKER_CONF}
      cmd: /bin/bash -c "kubectl --kubeconfig ${kube-config-path} -n ${env.NAMESPACE} create quota resource-quota --hard=limits.cpu=${env.CPU_LIMITS},limits.memory=${env.MEMORY_LIMITS}"


    - task: get-exclusive-cluster
      docker-image: ci-utils-pool
      docker-flags:
        - ${env.DOCKER_FLAGS_NO_DOCKER_CONF}
        - " -e LANG=en_US.utf8 -e LANGUAGE=en_US.utf8 -e LC_ALL=en_US.utf8"
      cmd: /bin/bash -c "export PYTHONPATH=$PYTHONPATH:/workdir/jenkins/scripts/pooled_eic; python3 -m pooled_deployment_setup get-exclusive-cluster --app-set ${env.APP_SET} --helmfile-version ${env.INT_CHART_VERSION} --clusterid ${env.SELECTED_CLUSTER_ID} --kubeconfig_dir kubeconfigs"

    - task: update-booking-helmfile-version
      docker-image: ci-utils-pool
      docker-flags:
        - ${env.DOCKER_FLAGS_NO_DOCKER_CONF}
        - " -e LANG=en_US.utf8 -e LANGUAGE=en_US.utf8 -e LC_ALL=en_US.utf8"
      cmd: /bin/bash -c "export PYTHONPATH=$PYTHONPATH:/workdir/jenkins/scripts/pooled_eic; python3 -m pooled_deployment_setup update-booking-values --jira-id ${env.JIRA_ID} --key eic_version --str_value ${env.INT_CHART_VERSION}"


    - task: update-booking-end-date
      docker-image: ci-utils-pool
      docker-flags:
        - ${env.DOCKER_FLAGS_NO_DOCKER_CONF}
        - " -e LANG=en_US.utf8 -e LANGUAGE=en_US.utf8 -e LC_ALL=en_US.utf8"
      cmd: /bin/bash -c "export PYTHONPATH=$PYTHONPATH:/workdir/jenkins/scripts/pooled_eic; python3 -m pooled_deployment_setup update-booking-values --jira-id ${env.JIRA_ID} --key booking_end_date --str_value ${env.BOOKING_END_DATE}"

    - task: annotate-namespace-booking-details
      docker-image: ci-utils-pool
      docker-flags:
        - ${env.DOCKER_FLAGS_NO_DOCKER_CONF}
        - " -e LANG=en_US.utf8 -e LANGUAGE=en_US.utf8 -e LC_ALL=en_US.utf8"
      cmd: /bin/bash -c "export PYTHONPATH=$PYTHONPATH:/workdir/jenkins/scripts/pooled_eic; python3 -m pooled_deployment_setup update-booking-namespace-annotations --kubeconfig ${kube-config-path} --jira-id ${env.JIRA_ID}"

    - task: get-cluster-lock-status
      docker-image: ci-utils-pool
      docker-flags:
        - ${env.DOCKER_FLAGS_NO_DOCKER_CONF}
        - " -e LANG=en_US.utf8 -e LANGUAGE=en_US.utf8 -e LC_ALL=en_US.utf8"
      cmd: /bin/bash -c "export PYTHONPATH=$PYTHONPATH:/workdir/jenkins/scripts/pooled_eic; python3 -m pooled_deployment_setup check-lockstatus --clusterid ${env.SELECTED_CLUSTER_ID}"

    - task: release-lock-on-cluster
      docker-image: ci-utils-pool
      docker-flags:
        - ${env.DOCKER_FLAGS_NO_DOCKER_CONF}
        - " -e LANG=en_US.utf8 -e LANGUAGE=en_US.utf8 -e LC_ALL=en_US.utf8"
      cmd: /bin/bash -c "export PYTHONPATH=$PYTHONPATH:/workdir/jenkins/scripts/pooled_eic; python3 -m pooled_deployment_setup set-lockstatus --lock-status False --clusterid ${env.SELECTED_CLUSTER_ID}"

    - task: lock-cluster
      docker-image: ci-utils-pool
      docker-flags:
        - ${env.DOCKER_FLAGS_NO_DOCKER_CONF}
        - " -e LANG=en_US.utf8 -e LANGUAGE=en_US.utf8 -e LC_ALL=en_US.utf8"
      cmd: /bin/bash -c "export PYTHONPATH=$PYTHONPATH:/workdir/jenkins/scripts/pooled_eic; python3 -m pooled_deployment_setup set-lockstatus --lock-status True --clusterid ${env.SELECTED_CLUSTER_ID}"

    - task: update-cluster-resource-usage
      docker-image: ci-utils-pool
      docker-flags:
        - ${env.DOCKER_FLAGS_NO_DOCKER_CONF}
        - " -e LANG=en_US.utf8 -e LANGUAGE=en_US.utf8 -e LC_ALL=en_US.utf8"
      cmd: /bin/bash -c "export PYTHONPATH=$PYTHONPATH:/workdir/jenkins/scripts/pooled_eic; python3 -m pooled_deployment_setup update-cluster-res --clusterid ${env.SELECTED_CLUSTER_ID} --kubeconfig ${kube-config-path}"

    - task: update-resources-usage-all-clusters
      docker-image: ci-utils-pool
      docker-flags:
        - ${env.DOCKER_FLAGS_NO_DOCKER_CONF}
        - " -e LANG=en_US.utf8 -e LANGUAGE=en_US.utf8 -e LC_ALL=en_US.utf8"
      cmd: /bin/bash -c "export PYTHONPATH=$PYTHONPATH:/workdir/jenkins/scripts/pooled_eic; python3 -m pooled_deployment_setup update-cluster-res-all-clusters --minioaccess ${env.MINIO_ACCESS_KEY} --miniosecret ${env.MINIO_SECRET_KEY}"

    - task: add-booking-json-to-mongoDB
      docker-image: ci-utils-pool
      docker-flags:
        - ${env.DOCKER_FLAGS_NO_DOCKER_CONF}
        - " -e LANG=en_US.utf8 -e LANGUAGE=en_US.utf8 -e LC_ALL=en_US.utf8"
      cmd: /bin/bash -c "export PYTHONPATH=$PYTHONPATH:/workdir/jenkins/scripts/pooled_eic; python3 -m pooled_deployment_setup add-booking --kubeconfig ${kube-config-path} --bookings-file ./booking.json"

    - task: remove-booking
      docker-image: ci-utils-pool
      docker-flags:
        - ${env.DOCKER_FLAGS_NO_DOCKER_CONF}
        - " -e LANG=en_US.utf8 -e LANGUAGE=en_US.utf8 -e LC_ALL=en_US.utf8"
      cmd: /bin/bash -c "export PYTHONPATH=$PYTHONPATH:/workdir/jenkins/scripts/pooled_eic; python3 -m pooled_deployment_setup remove-booking --jira-id ${env.JIRA_ID}"

    - task: get-team-users-associated-with-booking
      docker-image: ci-utils-pool
      docker-flags:
        - ${env.DOCKER_FLAGS_NO_DOCKER_CONF}
        - " -e LANG=en_US.utf8 -e LANGUAGE=en_US.utf8 -e LC_ALL=en_US.utf8"
      cmd: /bin/bash -c "export PYTHONPATH=$PYTHONPATH:/workdir/jenkins/scripts/pooled_eic; python3 -m pooled_deployment_setup get-users-from-booking --jira-id ${env.JIRA_ID}"

    - task: get-booking-details
      docker-image: ci-utils-pool
      docker-flags:
        - ${env.DOCKER_FLAGS_NO_DOCKER_CONF}
        - " -e LANG=en_US.utf8 -e LANGUAGE=en_US.utf8 -e LC_ALL=en_US.utf8"
      cmd: /bin/bash -c "export PYTHONPATH=$PYTHONPATH:/workdir/jenkins/scripts/pooled_eic; python3 -m pooled_deployment_setup get-booking-details --jira-id ${env.JIRA_ID}"

    - task: get-expired-bookings
      docker-image: ci-utils-pool
      docker-flags:
        - ${env.DOCKER_FLAGS_NO_DOCKER_CONF}
        - " -e LANG=en_US.utf8 -e LANGUAGE=en_US.utf8 -e LC_ALL=en_US.utf8"
      cmd: /bin/bash -c "export PYTHONPATH=$PYTHONPATH:/workdir/jenkins/scripts/pooled_eic; python3 -m pooled_deployment_setup find-expired-bookings"

    - task: retrieve-kubeconfig-from-minio
      docker-image: minio-client
      docker-flags:
        - ${env.MINIO_FLAGS_NO_DOCKER_CONF}
      cmd: "--config-dir /workdir cp minio/eic-pooled/kubeconfigs/${var.selected-cluster-id}_kubeconfig ."

    - task: copy-certs-to-minio
      docker-image: minio-client
      docker-flags:
        - ${env.MINIO_FLAGS_NO_DOCKER_CONF}
      cmd: "cp -r ./ minio/${remote_dir}"

    - task: check-certs-exists
      docker-image: ci-utils-pool
      docker-flags:
        # - ${env.MINIO_FLAGS_NO_DOCKER_CONF}
        - ${env.DOCKER_FLAGS_NO_DOCKER_CONF}
        - " -e LANG=en_US.utf8 -e LANGUAGE=en_US.utf8 -e LC_ALL=en_US.utf8"
      cmd: /bin/bash -c "export PYTHONPATH=$PYTHONPATH:/workdir/jenkins/scripts/pooled_eic; python3 -m pooled_deployment_setup check-certs --clusterid ${env.SELECTED_CLUSTER_ID} --domain ${env.DOMAIN} --minioaccess ${env.MINIO_ACCESS_KEY} --miniosecret ${env.MINIO_SECRET_KEY}"

    - task: retrieve-all-kubeconfig-files-from-minio
      docker-image: minio-client
      docker-flags:
        - ${env.MINIO_FLAGS_NO_DOCKER_CONF}
      cmd: "--config-dir /workdir cp --recursive minio/eic-pooled/kubeconfigs ."

    - task: get-from-minio-cluster-certificates
      docker-image: minio-client
      docker-flags:
        - ${env.MINIO_FLAGS_NO_DOCKER_CONF}
      cmd: --config-dir /workdir cp --recursive minio/eic-pooled/${var.selected-cluster-id} .

    - task: verify-cluster-certificates
      cmd: bash -c """
         cd ${env.PATH_TO_CERTIFICATES_FILES};
         cat iam.*.crt | openssl x509 -text -noout;
         openssl verify -CAfile intermediate-ca.crt *.crt
         """

    - task: fetch-helmfile
      docker-image: eric-oss-ci-scripts
      docker-flags:
        - ${eric-oss-ci-scripts-flags}
      cmd: script_executor download-helmfile --chart-name ${env.HELMFILE_CHART_NAME} --chart-version ${env.HELMFILE_CHART_VERSION} --chart-repo ${env.HELMFILE_CHART_REPO} --username ${env.FUNCTIONAL_USER_USERNAME} --user-password ${env.FUNCTIONAL_USER_PASSWORD}

    - task: extract-helmfile
      docker-image: eric-oss-ci-scripts
      docker-flags:
        - ${eric-oss-ci-scripts-flags}
      cmd: script_executor extract-tar-file --file ${env.HELMFILE_CHART_NAME}-${env.HELMFILE_CHART_VERSION}.tgz --dir ${env.PWD} --properties-file ${env.PROPERTIES_FILE}

    - task: get-dm-full-url-version
      docker-image: eric-oss-ci-scripts
      docker-flags:
        - ${eric-oss-ci-scripts-flags}
      cmd: script_executor get-dm-url-and-tag --image ${env.DEPLOYMENT_MANAGER_DOCKER_IMAGE} --file ${env.PWD}/${env.INT_CHART_NAME}/dm_version.yaml --properties-file ${env.PWD}/IMAGE_DETAILS.txt

    - task: untar-and-copy-helmfile-to-workdir
      cmd: tar -xvf ${env.INT_CHART_NAME}-${env.INT_CHART_VERSION}.tgz

    - task: fetch-site-values
      cmd: cp ${env.PWD}/${env.FULL_PATH_TO_SITE_VALUES_FILE} ${env.PWD}/site_values_${env.INT_CHART_VERSION}.yaml

    - task: enable-tls
      cmd: bash -x jenkins/scripts/pooled_eic/enable_tls.sh site_values_${env.INT_CHART_VERSION}.yaml

    - task: substitute-global-registry-details
      cmd:
        - perl -pi -e 's/DOCKER_REGISTRY_REPLACE/'${env.DOCKER_REGISTRY}'/' ${env.PWD}/site_values_${env.INT_CHART_VERSION}.yaml
        - perl -pi -e 's/USERNAME_REPLACE/'${env.FUNCTIONAL_USER_USERNAME}'/' ${env.PWD}/site_values_${env.INT_CHART_VERSION}.yaml
        - perl -pi -e 's/PASSWORD_REPLACE/'${env.FUNCTIONAL_USER_PASSWORD}'/' ${env.PWD}/site_values_${env.INT_CHART_VERSION}.yaml

    - task: substitute-application-hosts
      cmd: bash -c """
        if [[ ${env.SO_HOSTNAME} != "default" ]]; then
          perl -pi -e 's/SO_HOST_REPLACE/'${env.SO_HOSTNAME}'/' ${env.PWD}/site_values_${env.INT_CHART_VERSION}.yaml;
        fi;
        if [[ ${env.UDS_HOSTNAME} != "default" ]]; then
          perl -pi -e 's/UDS_HOST_REPLACE/'${env.UDS_HOSTNAME}'/' ${env.PWD}/site_values_${env.INT_CHART_VERSION}.yaml;
        fi;
        if [[ ${env.LA_HOSTNAME} != "default" ]]; then
          perl -pi -e 's/LA_HOST_REPLACE/'${env.LA_HOSTNAME}'/' ${env.PWD}/site_values_${env.INT_CHART_VERSION}.yaml;
        fi;
        if [[ ${env.KAFKA_BOOTSTRAP_HOSTNAME} != "default" ]]; then
          perl -pi -e 's/KAFKA_BOOTSTRAP_HOST_REPLACE/'${env.KAFKA_BOOTSTRAP_HOSTNAME}'/' ${env.PWD}/site_values_${env.INT_CHART_VERSION}.yaml;
        fi;
        if [[ ${env.IAM_HOSTNAME} != "default" ]]; then
          perl -pi -e 's/IAM_HOST_REPLACE/'${env.IAM_HOSTNAME}'/' ${env.PWD}/site_values_${env.INT_CHART_VERSION}.yaml;
        fi;
        if [[ ${env.PF_HOSTNAME} != "default" ]]; then
          perl -pi -e 's/PF_HOST_REPLACE/'${env.PF_HOSTNAME}'/' ${env.PWD}/site_values_${env.INT_CHART_VERSION}.yaml;
        fi;
        if [[ ${env.ADC_HOSTNAME} != "default" ]]; then
          perl -pi -e 's/ADC_HOST_REPLACE/'${env.ADC_HOSTNAME}'/' ${env.PWD}/site_values_${env.INT_CHART_VERSION}.yaml;
        fi;
        if [[ ${env.TA_HOSTNAME} != "default" ]]; then
          perl -pi -e 's/TA_HOST_REPLACE/'${env.TA_HOSTNAME}'/' ${env.PWD}/site_values_${env.INT_CHART_VERSION}.yaml;
        fi;
        if [[ ${env.EAS_HOSTNAME} != "default" ]]; then
          perl -pi -e 's/EAS_HOST_REPLACE/'${env.EAS_HOSTNAME}'/' ${env.PWD}/site_values_${env.INT_CHART_VERSION}.yaml;
        fi;
        if [[ ${env.CH_HOSTNAME} != "default" ]]; then
          perl -pi -e 's/CH_HOST_REPLACE/'${env.CH_HOSTNAME}'/' ${env.PWD}/site_values_${env.INT_CHART_VERSION}.yaml;
        fi;
        if [[ ${env.TH_HOSTNAME} != "default" ]]; then
          perl -pi -e 's/TH_HOST_REPLACE/'${env.TH_HOSTNAME}'/' ${env.PWD}/site_values_${env.INT_CHART_VERSION}.yaml;
        fi;
        if [[ ${env.APPMGR_HOSTNAME} != "default" ]]; then
          perl -pi -e 's/APPMGR_HOST_REPLACE/'${env.APPMGR_HOSTNAME}'/' ${env.PWD}/site_values_${env.INT_CHART_VERSION}.yaml;
        fi;
        if [[ ${env.OS_HOSTNAME} != "default" ]]; then
          perl -pi -e 's/OS_HOST_REPLACE/'${env.OS_HOSTNAME}'/' ${env.PWD}/site_values_${env.INT_CHART_VERSION}.yaml;
        fi;
        if [[ ${env.GAS_HOSTNAME} != "default" ]]; then
          perl -pi -e 's/GAS_HOST_REPLACE/'${env.GAS_HOSTNAME}'/' ${env.PWD}/site_values_${env.INT_CHART_VERSION}.yaml;
        fi;
        if [[ ${env.VNFM_HOSTNAME} != "default" ]]; then
          perl -pi -e 's/VNFM_HOST_REPLACE/'${env.VNFM_HOSTNAME}'/' ${env.PWD}/site_values_${env.INT_CHART_VERSION}.yaml;
        fi;
        if [[ ${env.VNFM_REGISTRY_HOSTNAME} != "default" ]]; then
          perl -pi -e 's/VNFM_REGISTRY_HOST_REPLACE/'${env.VNFM_REGISTRY_HOSTNAME}'/' ${env.PWD}/site_values_${env.INT_CHART_VERSION}.yaml;
        fi;
        if [[ ${env.HELM_REGISTRY_HOSTNAME} != "default" ]]; then
          perl -pi -e 's/HELM_CHART_HOST_REPLACE/'${env.HELM_REGISTRY_HOSTNAME}'/' ${env.PWD}/site_values_${env.INT_CHART_VERSION}.yaml;
        fi;
        if [[ ${env.GR_HOSTNAME} != "default" ]]; then
          perl -pi -e 's/GR_HOST_REPLACE/'${env.GR_HOSTNAME}'/' ${env.PWD}/site_values_${env.INT_CHART_VERSION}.yaml;
        fi;
        if [[ ${env.ML_HOSTNAME} != "default" ]]; then
          perl -pi -e 's/ML_HOST_REPLACE/'${env.ML_HOSTNAME}'/' ${env.PWD}/site_values_${env.INT_CHART_VERSION}.yaml;
        fi;
        if [[ ${env.AVIZ_HOSTNAME} != "default" ]]; then
          perl -pi -e 's/AVIZ_HOST_REPLACE/'${env.AVIZ_HOSTNAME}'/' ${env.PWD}/site_values_${env.INT_CHART_VERSION}.yaml;
        fi;
        if [[ ${env.BDR_HOSTNAME} != "default" ]]; then
          perl -pi -e 's/BDR_HOST_REPLACE/'${env.BDR_HOSTNAME}'/' ${env.PWD}/site_values_${env.INT_CHART_VERSION}.yaml;
        fi;
        if [[ ${env.VNFLCM_SERVICE_IP} != "default" ]]; then
          perl -pi -e 's/VNFLCM_SERVICE_IP_REPLACE/'${env.VNFLCM_SERVICE_IP}'/' ${env.PWD}/site_values_${env.INT_CHART_VERSION}.yaml;
        fi;
        if [[ ${env.INGRESS_IP} != "default" ]]; then
          perl -pi -e 's/INGRESS_IP_REPLACE/'${env.INGRESS_IP}'/' ${env.PWD}/site_values_${env.INT_CHART_VERSION}.yaml;
        fi;
        if [[ ${env.FH_SNMP_ALARM_IP} != "default" ]]; then
          perl -pi -e 's/FH_SNMP_ALARM_IP_REPLACE/'${env.FH_SNMP_ALARM_IP}'/' ${env.PWD}/site_values_${env.INT_CHART_VERSION}.yaml;
        fi;
        if [[ ${env.INGRESS_CLASS} != "default" ]]; then
          perl -pi -e 's/eo_iccr/'${env.INGRESS_CLASS}'/' ${env.PWD}/site_values_${env.INT_CHART_VERSION}.yaml;
        fi;
        if [[ ${env.EO_CM_HOSTNAME} != "default" ]]; then
          perl -pi -e 's/EO_CM_HOST_REPLACE/'${env.EO_CM_HOSTNAME}'/' ${env.PWD}/site_values_${env.INT_CHART_VERSION}.yaml;
        fi;
        if [[ ${env.EO_CM_IP} != "default" ]]; then
          perl -pi -e 's/EO_CM_IP_REPLACE/'${env.EO_CM_IP}'/' ${env.PWD}/site_values_${env.INT_CHART_VERSION}.yaml;
        fi;
        if [[ ${env.EO_CM_ESA_IP} != "default" ]]; then
          perl -pi -e 's/EO_CM_ESA_IP_REPLACE/'${env.EO_CM_ESA_IP}'/' ${env.PWD}/site_values_${env.INT_CHART_VERSION}.yaml;
        fi;"""

    - task: substitute-application-deployment-option
      docker-image: eric-oss-ci-scripts
      docker-flags:
        - ${eric-oss-ci-scripts-flags}
      cmd: script_executor set-deployment-tags --deployment-tags "${env.TAGS}" --state-values-file ${env.PWD}/site_values_${env.INT_CHART_VERSION}.yaml

    - task: substitute-application-service-option
      cmd:
        - perl -pi -e 's/VNFLCM_SERVICE_DEPLOY_REPLACE/'${env.VNFLCM_SERVICE_DEPLOY}'/' ${env.PWD}/site_values_${env.INT_CHART_VERSION}.yaml
        - perl -pi -e 's/HELM_REGISTRY_DEPLOY_REPLACE/'${env.HELM_REGISTRY_DEPLOY}'/' ${env.PWD}/site_values_${env.INT_CHART_VERSION}.yaml

    - task: substitute-ipv6-enable
      cmd:
        - perl -pi -e 's/IPV6_ENABLE_REPLACE/'${env.IPV6_ENABLE}'/' ${env.PWD}/site_values_${env.INT_CHART_VERSION}.yaml

    - task: substitute-ddp-details
      cmd:
        - perl -pi -e 's/DDP_AUTOUPLOAD_ENABLED_REPLACE/'${env.DDP_AUTO_UPLOAD}'/' ${env.PWD}/site_values_${env.INT_CHART_VERSION}.yaml;

    - task: update-user-details
      cmd:
        - perl -pi -e 's/\{\{ env "GERRIT_USERNAME" \}\}/'${env.FUNCTIONAL_USER_USERNAME}'/' ${env.PWD}/${env.INT_CHART_NAME}/repositories.yaml
        - perl -pi -e 's/\{\{ env "GERRIT_PASSWORD" \}\}/'${env.FUNCTIONAL_USER_PASSWORD}'/' ${env.PWD}/${env.INT_CHART_NAME}/repositories.yaml

    - task: populate-default-registry-credentials
      docker-image: eric-oss-ci-scripts
      docker-flags:
        - ${eric-oss-ci-scripts-flags}
      cmd: script_executor populate-repository-credentials --file ${env.PWD}/${env.INT_CHART_NAME}/repositories.yaml --username ${env.FUNCTIONAL_USER_USERNAME} --user-password ${env.FUNCTIONAL_USER_PASSWORD}

    - task: get-release-details-from-helmfile
      docker-image: eric-oss-ci-scripts
      docker-flags:
        - --env FUNCTIONAL_USER_USERNAME
        - --env FUNCTIONAL_USER_PASSWORD
        - ${eric-oss-ci-scripts-flags}
        - ${helm-cache-tags}
      cmd: script_executor get-release-details-from-helmfile --state-values-file ${env.PWD}/${env.STATE_VALUES_FILE} --path-to-helmfile ${env.PWD}/${env.PATH_TO_HELMFILE} --get-all-images ${env.GET_ALL_IMAGES} --fetch-charts ${env.FETCH_CHARTS} --helmfile-url ${env.INT_CHART_REPO} --chart-cache-directory ${env.DEPENDENCY_CACHE_DIRECTORY}

    - task: helmfile-charts-mini-csar-build
      cmd: ${env.PWD}/oss-integration-ci/ci/jenkins/scripts/build_csars_from_properties_file.sh -f ${env.PWD}/am_package_manager.properties -d ${csar-builder-image-full-name} -i ${env.INCLUDE_CHART_IMAGES} -s ${csar-sol-version}

    - task: cleanup-charts-mini-csar-build
      docker-image: eric-oss-ci-scripts
      docker-flags:
        - ${eric-oss-ci-scripts-flags}
      cmd: script_executor cleaning-up-workspace-from-properties-file --file ${env.PWD}/am_package_manager.properties

    - task: deployment-manager-init
      docker-image: deployment-manager
      docker-flags:
        - ${env.DOCKER_FLAGS_DEPLOYMENT_MANAGER}
      cmd: init

    - task: copy-certificate-files
      cmd: cp -r ${env.PWD}/${env.PATH_TO_CERTIFICATES_FILES}/* ${env.PWD}/certificates

    - task: copy-certificates-files-for-certm
      cmd: ${env.PWD}/jenkins/scripts/pooled_eic/check_certm.sh ${env.PWD} ${env.PATH_TO_CERTIFICATES_FILES}

    - task: rename-ci-site-values
      cmd: mv -f ${env.PWD}/site_values_${env.INT_CHART_VERSION}.yaml ${env.PWD}/ci_site_values_${env.INT_CHART_VERSION}.yaml

    - task: deployment-manager-prepare
      docker-image: deployment-manager
      docker-flags:
        - ${env.DOCKER_FLAGS_DEPLOYMENT_MANAGER}
      cmd: prepare --namespace ${env.NAMESPACE}

    - task: populate-prepare-dm-site-values
      docker-image: eric-oss-ci-scripts
      docker-flags:
        - ${eric-oss-ci-scripts-flags}
      cmd: script_executor merge-yaml-files --path-base-yaml ${env.PWD}/site_values_${env.INT_CHART_VERSION}.yaml --path-override-yaml ${env.PWD}/ci_site_values_${env.INT_CHART_VERSION}.yaml --path-output-yaml ${env.PWD}/site_values_${env.INT_CHART_VERSION}.yaml --check-values-only true

    - task: override-site-values
      docker-image: eric-oss-ci-scripts
      docker-flags:
        - ${eric-oss-ci-scripts-flags}
      cmd: script_executor merge-yaml-files --path-base-yaml ${env.PWD}/site_values_${env.INT_CHART_VERSION}.yaml --path-override-yaml "${env.PWD}/${env.PATH_TO_SITE_VALUES_OVERRIDE_FILE}" --path-output-yaml ${env.PWD}/site_values_${env.INT_CHART_VERSION}.yaml

    - task: remove-local-repositories-yaml
      cmd: rm ${env.PWD}/${env.INT_CHART_NAME}/repositories.yaml

    - task: print-dm-version
      docker-image: deployment-manager
      docker-flags:
        - ${env.DOCKER_FLAGS_DEPLOYMENT_MANAGER}
      cmd: version | (echo -n 'DEPLOYMENT_MANAGER_VERSION=' && cat)

    - task: archive-dm-version
      docker-image: deployment-manager
      docker-flags:
        - ${env.DOCKER_FLAGS_DEPLOYMENT_MANAGER}
      cmd: version | (echo -n 'DEPLOYMENT_MANAGER_VERSION=' && cat) >> artifact.properties

    - task: set-skip-image-push-parameter
      cmd: /bin/bash -c "if ${env.USE_SKIP_IMAGE_PUSH};
                            then echo '--skip-image-check-push';
                         else
                            echo '';
                         fi" > .bob/var.skip-image-check-push-parameter

    - task: set-skip-upgrade-for-unchanged-releases-parameter
      cmd: /bin/bash -c "if ${env.USE_SKIP_UPGRADE_FOR_UNCHANGED_RELEASES} && [ '${env.DEPLOYMENT_TYPE}' == 'upgrade' ];
                            then echo '--skip-upgrade-for-unchanged-releases';
                         else
                            echo '';
                         fi" > .bob/var.skip-upgrade-for-unchanged-releases-parameter

    - task: set-use-certm-parameter
      cmd: /bin/bash -c "if ${env.USE_CERTM};
        then echo '--use-certm';
        else
        echo '';
        fi" > .bob/var.use-certm-parameter

    - task: deploy-helmfile
      docker-image: deployment-manager
      docker-flags:
        - ${env.DOCKER_FLAGS_DEPLOYMENT_MANAGER}
      cmd: ${env.DEPLOYMENT_TYPE} --namespace ${env.NAMESPACE} --docker-timeout ${env.DOCKER_TIMEOUT} --helm-timeout ${env.HELM_TIMEOUT} --crd-namespace ${env.CRD_NAMESPACE} --verbosity ${env.VERBOSITY} ${var.skip-image-check-push-parameter} ${var.skip-upgrade-for-unchanged-releases-parameter} ${var.use-certm-parameter}

    - task: parse-deployment-log
      cmd:
        - perl -ne 'if (m/manager\] \[INFO\]:\sTime Taken:\s(.*)/) { print "DEPLOYMENT_TIME=$1\n" }' logs/*_[ui]??????.log >> artifact.properties

    - task: gather-deployment-manager-logs
      docker-image: deployment-manager
      docker-flags:
        - ${env.DOCKER_FLAGS_DEPLOYMENT_MANAGER}
      cmd: collect-logs --namespace ${env.NAMESPACE}

    - task: gather-adp-k8s-logs
      docker-image: ci-utils-pool
      docker-flags:
        - ${env.DOCKER_FLAGS_NO_DOCKER_CONF}
        - "-e KUBECONFIG=./kube_config/config"
      cmd: bash -c 'oss-integration-ci/eo-integration-ci/app-staging/ci/jenkins/scripts/collect_ADP_logs.sh ${env.NAMESPACE}'

    - task: override-functional-password
      docker-image: eric-oss-ci-scripts
      docker-flags:
        - ${eric-oss-ci-scripts-flags}
      cmd: script_executor replacing-password --state-values-file ${env.PWD}/${env.STATE_VALUES_FILE}

    - task: set-cluster-exclusive
      docker-image: ci-utils-pool
      docker-flags:
        - ${env.DOCKER_FLAGS_NO_DOCKER_CONF}
        - " -e LANG=en_US.utf8 -e LANGUAGE=en_US.utf8 -e LC_ALL=en_US.utf8"
      cmd: /bin/bash -c "export PYTHONPATH=$PYTHONPATH:/workdir/jenkins/scripts/pooled_eic; python3 -m pooled_deployment_setup set-cluster-exclusive --action ${env.ACTION} --clusterid ${env.SELECTED_CLUSTER_ID} --kubeconfig ${kube-config-path}"

    - task: onboard-cluster-to-mongo
      docker-image: ci-utils-pool
      docker-flags:
        - ${env.DOCKER_FLAGS_NO_DOCKER_CONF}
        - " -e LANG=en_US.utf8 -e LANGUAGE=en_US.utf8 -e LC_ALL=en_US.utf8"
      cmd: /bin/bash -c "export PYTHONPATH=$PYTHONPATH:/workdir/jenkins/scripts/pooled_eic; python3 -m pooled_deployment_setup create-cluster --clusterid ${env.SELECTED_CLUSTER_ID}"

    - task: offboard-cluster-to-mongo
      docker-image: ci-utils-pool
      docker-flags:
        - ${env.DOCKER_FLAGS_NO_DOCKER_CONF}
        - " -e LANG=en_US.utf8 -e LANGUAGE=en_US.utf8 -e LC_ALL=en_US.utf8"
      cmd: /bin/bash -c "export PYTHONPATH=$PYTHONPATH:/workdir/jenkins/scripts/pooled_eic; python3 -m pooled_deployment_setup remove-cluster --clusterid ${env.SELECTED_CLUSTER_ID}"
    - task: perform-node-config-to-cluster
      docker-image: ci-utils-pool
      docker-flags:
        - ${env.DOCKER_FLAGS_NO_DOCKER_CONF}
        - " -e LANG=en_US.utf8 -e LANGUAGE=en_US.utf8 -e LC_ALL=en_US.utf8"
      cmd: /bin/bash -x /workdir/jenkins/scripts/pooled_eic/perform-node-config-to-cluster.sh
                            --kubeconfig ${kube-config-path}
                            --ca-crt-path /workdir/jenkins/scripts/pooled_eic/certs/PhotonCA.crt
                            --max-pods 110

    - task: remove-all-charts
      docker-image: ci-utils
      docker-flags:
        - ${env.DOCKER_FLAGS_NO_DOCKER_CONF}
      cmd: /workdir/jenkins/scripts/remove_helm_charts.sh ${env.NAMESPACE} ${kube-config-path}

    - task: check-storage-class
      docker-image: ci-utils
      docker-flags:
        - ${env.DOCKER_FLAGS_NO_DOCKER_CONF}
      cmd: /bin/bash -c "kubectl --kubeconfig ${kube-config-path} get storageclass | grep default | grep block || { kubectl --kubeconfig ${kube-config-path}  patch storageclass network-file -p '{\"metadata\":{\"annotations\":{\"storageclass.kubernetes.io/is-default-class\":\"false\"}}}'; kubectl --kubeconfig -kubeconfig ${kube-config-path} patch storageclass network-block -p '{\"metadata\":{\"annotations\":{\"storageclass.kubernetes.io/is-default-class\":\"true\"}}}'; }"

    - task: annotate-namespace-with-version
      docker-image: ci-utils
      docker-flags:
        - ${env.DOCKER_FLAGS_NO_DOCKER_CONF}
      cmd: /bin/bash -c "kubectl --kubeconfig ${kube-config-path} annotate --overwrite namespace ${env.NAMESPACE} eiap-version=${env.INT_CHART_VERSION}"

    - task: annotate-namespace-with-booked-true
      docker-image: ci-utils
      docker-flags:
        - ${env.DOCKER_FLAGS_NO_DOCKER_CONF}
      cmd: /bin/bash -c "kubectl --kubeconfig ${kube-config-path} annotate --overwrite namespace ${env.NAMESPACE} booked=true"

    - task: annotate-namespace-with-reserved-true
      docker-image: ci-utils
      docker-flags:
        - ${env.DOCKER_FLAGS_NO_DOCKER_CONF}
      cmd: /bin/bash -c "kubectl --kubeconfig ${kube-config-path} annotate --overwrite namespace ${env.NAMESPACE} reserved=true"



    - task: set-skip-image-push-parameter
      cmd: /bin/bash -c "if ${env.USE_SKIP_IMAGE_PUSH};
                            then echo '--skip-image-check-push';
                         else
                            echo '';
                         fi" > .bob/var.skip-image-check-push-parameter



    - task: remove-resource-quotas
      docker-image: ci-utils
      docker-flags:
        - ${env.DOCKER_FLAGS_NO_DOCKER_CONF}
      cmd: /bin/bash -c "if  kubectl --kubeconfig ${kube-config-path} -n ${env.NAMESPACE} get resourcequotas resource-quota; then
                            echo 'Deleting the resource quota';
                            kubectl --kubeconfig ${kube-config-path} -n ${env.NAMESPACE} delete resourcequotas resource-quota;
                         else
                            echo 'No resource quotas found in the Namespace';
                         fi"

    - task: clear-namespace-annotations
      docker-image: ci-utils-pool
      docker-flags:
        - ${env.DOCKER_FLAGS_NO_DOCKER_CONF}
        - " -e LANG=en_US.utf8 -e LANGUAGE=en_US.utf8 -e LC_ALL=en_US.utf8"
      cmd: /bin/bash -c "export PYTHONPATH=$PYTHONPATH:/workdir/jenkins/scripts/pooled_eic; python3 -m pooled_deployment_setup remove-annotations --kubeconfig ${kube-config-path} --namespace ${env.NAMESPACE}"

    - task: enable-federation
      docker-image: ci-utils
      docker-flags:
        - ${env.DOCKER_FLAGS_NO_DOCKER_CONF}
      cmd: /bin/bash -c "kubectl --kubeconfig ${kube-config-path} apply -f /workdir/jenkins/templates/networkPolicyMonitoring.yaml -n ${env.NAMESPACE}"

    - task: eiap_postcheck
      docker-image: ci-utils
      docker-flags:
        - ${env.DOCKER_FLAGS_NO_DOCKER_CONF}
      cmd: /bin/bash -c "/workdir/jenkins/scripts/eiap_postcheck.sh ${kube-config-path} ${env.NAMESPACE} ${env.DOMAIN}"


    - task: create-cluster-namespaces-for-onboarding
      docker-image: ci-utils-pool
      docker-flags:
        - ${env.DOCKER_FLAGS_NO_DOCKER_CONF}
        - " -e LANG=en_US.utf8 -e LANGUAGE=en_US.utf8 -e LC_ALL=en_US.utf8"
      cmd: /bin/bash -c "/workdir/jenkins/scripts/pooled_eic/onboardingClusterCreateNs.sh ${kube-config-path} ${env.SELECTED_CLUSTER_ID}"

    - task: add-annotate-users-as-admins-to-namespace
      docker-image: ci-utils-pool
      docker-flags:
        - ${env.DOCKER_FLAGS_NO_DOCKER_CONF}
        - " -e LANG=en_US.utf8 -e LANGUAGE=en_US.utf8 -e LC_ALL=en_US.utf8"
      cmd: /bin/bash -c "/workdir/jenkins/scripts/pooled_eic/manage_users.sh --action ADD-NAMESPACE-USERS --users ${env.USERS} --namespace ${env.NAMESPACE} --kubeconfig ${kube-config-path}"

    - task: annotate-users-in-namespace
      docker-image: ci-utils-pool
      docker-flags:
        - ${env.DOCKER_FLAGS_NO_DOCKER_CONF}
        - " -e LANG=en_US.utf8 -e LANGUAGE=en_US.utf8 -e LC_ALL=en_US.utf8"
      cmd: /bin/bash -c "/workdir/jenkins/scripts/pooled_eic/manage_users.sh --action ANONATE-NAMESPACE-USERS --users default --namespace ${env.NAMESPACE} --kubeconfig ${kube-config-path}"

    - task: remove-annotate-users-as-admins-to-namespace
      docker-image: ci-utils-pool
      docker-flags:
        - ${env.DOCKER_FLAGS_NO_DOCKER_CONF}
        - " -e LANG=en_US.utf8 -e LANGUAGE=en_US.utf8 -e LC_ALL=en_US.utf8"
      cmd: /bin/bash -c "/workdir/jenkins/scripts/pooled_eic/manage_users.sh --action DEL-NAMESPACE-USERS --users ${env.USERS} --namespace ${env.NAMESPACE} --kubeconfig ${kube-config-path}"

    - task: add-annotate-users-as-admins-to-cluster
      docker-image: ci-utils-pool
      docker-flags:
        - ${env.DOCKER_FLAGS_NO_DOCKER_CONF}
        - " -e LANG=en_US.utf8 -e LANGUAGE=en_US.utf8 -e LC_ALL=en_US.utf8"
      cmd: /bin/bash -c "/workdir/jenkins/scripts/pooled_eic/manage_users.sh --action ADD-CLUSTER-ADMINS --users ${env.USERS} --namespace ${env.NAMESPACE} --kubeconfig ${kube-config-path}"

    - task: remove-annotate-users-as-admins-to-cluster
      docker-image: ci-utils-pool
      docker-flags:
        - ${env.DOCKER_FLAGS_NO_DOCKER_CONF}
        - " -e LANG=en_US.utf8 -e LANGUAGE=en_US.utf8 -e LC_ALL=en_US.utf8"
      cmd: /bin/bash -c "/workdir/jenkins/scripts/pooled_eic/manage_users.sh --action DEL-CLUSTER-ADMINS --users ${env.USERS} --namespace ${env.NAMESPACE} --kubeconfig ${kube-config-path}"

  check-helmfile-deployment-status:
    - task: execute-health-check-using-deployment-manager
      docker-image: deployment-manager
      docker-flags:
        - "--user 0:0"
        - ${env.DOCKER_FLAGS_NO_DOCKER_CONF}
        - "-e KUBECONFIG=/workdir/kube_config/config"
      cmd: health-check all --namespace ${env.NAMESPACE}

  do-health-check:
    - task: check-eks-connectivity
      docker-image: ci-utils
      docker-flags:
        - ${env.DOCKER_FLAGS_NO_DOCKER_CONF}
      cmd: /bin/bash -c "/workdir/jenkins/scripts/eks_connectivity_check.sh ${kube-config-path}"

  create-release-namespace:
    - task: create-namespace
      docker-image: ci-utils
      docker-flags:
        - ${env.DOCKER_FLAGS_NO_DOCKER_CONF}
      cmd: /bin/bash -c "kubectl get namespace ${env.NAMESPACE} --kubeconfig ${kube-config-path} || kubectl create namespace ${env.NAMESPACE} --kubeconfig ${kube-config-path}"

    - task: create-crd-namespace
      docker-image: ci-utils
      docker-flags:
        - ${env.DOCKER_FLAGS_NO_DOCKER_CONF}
      cmd: /bin/bash -c "kubectl get namespace ${env.CRD_NAMESPACE} --kubeconfig ${kube-config-path} || kubectl create namespace ${env.CRD_NAMESPACE} --kubeconfig ${kube-config-path}"

  create-credentials-secrets:
    - task: create-secrets
      docker-image: ci-utils
      docker-flags:
        - ${env.DOCKER_FLAGS_NO_DOCKER_CONF}
      cmd: /workdir/jenkins/scripts/pooled_eic/create_delete_secrets_pooled.sh create ${env.NAMESPACE} ${kube-config-path} ${env.IDUN_USER_PASSWORD} ${env.ADP_DDC_USER_PASSWORD}

  remove-installed-jobs:
    - task: remove-installed-jobs
      docker-image: ci-utils
      docker-flags:
        - ${env.DOCKER_FLAGS_NO_DOCKER_CONF}
      cmd: /bin/bash -c 'kubectl delete jobs --all --namespace ${env.NAMESPACE} --kubeconfig ${kube-config-path}'

  remove-installed-pvcs:
    - task: remove-pvcs
      docker-image: ci-utils
      docker-flags:
        - ${env.DOCKER_FLAGS_NO_DOCKER_CONF}
      cmd: bash -c "if kubectl get namespace ${env.NAMESPACE} --kubeconfig ${kube-config-path}; then /workdir/jenkins/scripts/delete_pvcs_in_namespace.sh ${env.NAMESPACE} ${kube-config-path}; fi"

  remove-installed-secrets:
    - task: remove-secrets
      docker-image: ci-utils
      docker-flags:
        - ${env.DOCKER_FLAGS_NO_DOCKER_CONF}
      cmd: bash -c "if kubectl get namespace ${env.NAMESPACE} --kubeconfig ${kube-config-path}; then /workdir/jenkins/scripts/pooled_eic/create_delete_secrets_pooled.sh delete ${env.NAMESPACE} ${kube-config-path} ${env.IDUN_USER_PASSWORD}; fi"

  remove-network-policies:
    - task: get-policies-to-remove
      docker-image: ci-utils
      docker-flags:
        - ${env.DOCKER_FLAGS_NO_DOCKER_CONF}
      cmd: kubectl -n ${env.NAMESPACE} --kubeconfig ${kube-config-path} get networkpolicies | awk '{print $1}' > .bob/var.network-policies

    - task: append-additional-hook-policies
      docker-image: ci-utils
      docker-flags:
        - ${env.DOCKER_FLAGS_NO_DOCKER_CONF}
      cmd: kubectl -n ${env.NAMESPACE} --kubeconfig ${kube-config-path} get networkpolicies -o=jsonpath='{.items[?(@.metadata.annotations.helm\.sh/hook=="pre-upgrade")].metadata.name}' >> .bob/var.network-policies

    - task: remove-first-line
      cmd: sed -i '1d' .bob/var.network-policies

    - task: remove-duplicates
      cmd: sort -u -o .bob/var.network-policies .bob/var.network-policies

    - task: remove-network-policies
      docker-image: ci-utils
      docker-flags:
        - ${env.DOCKER_FLAGS_NO_DOCKER_CONF}
      cmd: /bin/bash -c 'for POLICY in $(cat .bob/var.network-policies);
        do echo "Removing $POLICY";
        kubectl delete -n ${env.NAMESPACE} --kubeconfig ${kube-config-path} networkpolicy $POLICY;
        done;'
  remove-destinationrules:
    - task: remove-destinationrules
      docker-image: ci-utils
      docker-flags:
        - ${env.DOCKER_FLAGS_NO_DOCKER_CONF}
      cmd: kubectl delete -n ${env.NAMESPACE} --kubeconfig ${kube-config-path} destinationrule    --all
